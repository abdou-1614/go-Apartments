basePath: /api
definitions:
  model.RequestStatus:
    enum:
    - pending
    - accepted
    - rejected
    type: string
    x-enum-varnames:
    - RequestPending
    - RequestAccepted
    - RequestRejected
  model.UserRole:
    enum:
    - admin
    - user
    - landlords
    - guest
    type: string
    x-enum-varnames:
    - RoleAdmin
    - RoleUser
    - RoleLandlords
    - RoleGuest
  routes.PropertyResponse:
    properties:
      city:
        type: string
      id:
        type: integer
      lat:
        type: number
      lng:
        type: number
      propertyType:
        type: string
      stars:
        type: integer
      state:
        type: string
      street:
        type: string
      unitType:
        type: string
      zip:
        type: integer
    type: object
  routes.RegisterUser:
    properties:
      email:
        maxLength: 265
        type: string
      firstName:
        maxLength: 265
        type: string
      lastName:
        maxLength: 265
        type: string
      password:
        maxLength: 265
        minLength: 6
        type: string
      role:
        $ref: '#/definitions/model.UserRole'
    required:
    - email
    - firstName
    - lastName
    - password
    - role
    type: object
  routes.RoleChangeRequest:
    properties:
      userID:
        type: integer
    required:
    - userID
    type: object
  routes.RoleChangeRequestWithUser:
    properties:
      id:
        type: integer
      newRole:
        $ref: '#/definitions/model.UserRole'
      status:
        $ref: '#/definitions/model.RequestStatus'
      userID:
        type: integer
      userName:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server Petstore server.
  termsOfService: http://swagger.io/terms/
  title: Swagger Example APARTEMENTS
  version: "1.0"
paths:
  /getAllProperties:
    get:
      consumes:
      - application/json
      description: Retrieves All properties.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/routes.PropertyResponse'
            type: array
        "500":
          description: Internal Server Error
      summary: Get All properties
      tags:
      - Property
  /getTop:
    get:
      consumes:
      - application/json
      description: Retrieves the top-rated properties in descending order.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/routes.PropertyResponse'
            type: array
        "500":
          description: Internal Server Error
      summary: Get top-rated properties
      tags:
      - Property
  /manage-role-requests:
    get:
      consumes:
      - application/json
      description: Retrieves All user requests to change role.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/routes.RoleChangeRequestWithUser'
            type: array
        "403":
          description: Only admins can manage role change requests
        "500":
          description: Internal Server Error
      summary: Manage All users requests
      tags:
      - Users
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user with the provided information.
      parameters:
      - description: User registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/routes.RegisterUser'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/routes.RegisterUser'
        "400":
          description: Invalid input
        "409":
          description: User already exists
      summary: Register a new user
      tags:
      - Users
  /submit-role-change:
    post:
      consumes:
      - application/json
      description: Submit user request to change role.
      parameters:
      - description: User Submit
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/routes.RoleChangeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: THE REQUEST HAS BEEN SUBMITED SUCCESSFULLY
        "400":
          description: Invalid input
        "500":
          description: You can only request a role change for yourself
      summary: Submit Change Role Request.
      tags:
      - Users
swagger: "2.0"
