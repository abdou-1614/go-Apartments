basePath: /api
definitions:
  model.RequestStatus:
    enum:
    - pending
    - accepted
    - rejected
    type: string
    x-enum-varnames:
    - RequestPending
    - RequestAccepted
    - RequestRejected
  model.UserRole:
    enum:
    - admin
    - user
    - landlords
    - guest
    type: string
    x-enum-varnames:
    - RoleAdmin
    - RoleUser
    - RoleLandlords
    - RoleGuest
  routes.PropertyResponse:
    properties:
      city:
        type: string
      id:
        type: integer
      lat:
        type: number
      lng:
        type: number
      propertyType:
        type: string
      stars:
        type: integer
      state:
        type: string
      street:
        type: string
      unitType:
        type: string
      zip:
        type: integer
    type: object
  routes.RegisterUser:
    properties:
      email:
        maxLength: 265
        type: string
      firstName:
        maxLength: 265
        type: string
      lastName:
        maxLength: 265
        type: string
      password:
        maxLength: 265
        minLength: 6
        type: string
      role:
        $ref: '#/definitions/model.UserRole'
    required:
    - email
    - firstName
    - lastName
    - password
    - role
    type: object
  routes.RoleChangeRequest:
    properties:
      userID:
        type: integer
    required:
    - userID
    type: object
  routes.RoleChangeRequestWithUser:
    properties:
      id:
        type: integer
      newRole:
        $ref: '#/definitions/model.UserRole'
      status:
        $ref: '#/definitions/model.RequestStatus'
      userID:
        type: integer
      userName:
        type: string
    type: object
  routes.UpdateApartmentsInput:
    properties:
      ID:
        type: integer
      active:
        type: boolean
      amenities:
        items:
          type: string
        type: array
      availableOn:
        type: string
      bathrooms:
        maximum: 6.5
        minimum: 0.5
        type: number
      bedroom:
        maximum: 6
        minimum: 0
        type: integer
      deposit:
        type: number
      description:
        type: string
      images:
        items:
          type: string
        type: array
      leaseLength:
        maxLength: 256
        type: string
      rent:
        type: number
      sqFt:
        maximum: 100000000000
        type: integer
      unit:
        maxLength: 256
        type: string
    required:
    - active
    - availableOn
    - bathrooms
    - bedroom
    - deposit
    - leaseLength
    - rent
    - sqFt
    - unit
    type: object
  routes.UpdatePropertyInput:
    properties:
      amenities:
        items:
          type: string
        type: array
      apartments:
        items:
          $ref: '#/definitions/routes.UpdateApartmentsInput'
        type: array
      callingCode:
        type: string
      countryCode:
        type: string
      description:
        type: string
      email:
        type: string
      firstName:
        type: string
      images:
        items:
          type: string
        type: array
      includedUtilities:
        items:
          type: string
        type: array
      lastName:
        type: string
      laundryType:
        type: string
      name:
        type: string
      onMarket:
        type: boolean
      parkingFee:
        type: number
      petsAllowed:
        type: string
      phoneNumber:
        type: string
      unitType:
        enum:
        - single
        - multiple
        type: string
      website:
        type: string
    required:
    - apartments
    - email
    - laundryType
    - onMarket
    - petsAllowed
    - phoneNumber
    - unitType
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server Petstore server.
  termsOfService: http://swagger.io/terms/
  title: Swagger Example APARTEMENTS
  version: "1.0"
paths:
  /accept-role-change-request/{id}:
    put:
      consumes:
      - application/json
      description: Accepts a role change request for an admin user
      operationId: accept-role-change-request
      parameters:
      - description: Request ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success response
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Accept a role change request
      tags:
      - Users
  /getAllProperties:
    get:
      consumes:
      - application/json
      description: Retrieves All properties.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/routes.PropertyResponse'
            type: array
        "500":
          description: Internal Server Error
      summary: Get All properties
      tags:
      - Property
  /getTop:
    get:
      consumes:
      - application/json
      description: Retrieves the top-rated properties in descending order.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/routes.PropertyResponse'
            type: array
        "500":
          description: Internal Server Error
      summary: Get top-rated properties
      tags:
      - Property
  /manage-role-requests:
    get:
      consumes:
      - application/json
      description: Retrieves All user requests to change role.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/routes.RoleChangeRequestWithUser'
            type: array
        "403":
          description: Only admins can manage role change requests
        "500":
          description: Internal Server Error
      summary: Manage All users requests
      tags:
      - Users
  /properties/{id}:
    put:
      consumes:
      - application/json
      description: Update a property by ID.
      parameters:
      - description: Property ID
        format: int64
        in: path
        name: id
        required: true
        type: integer
      - default: JWT Token
        description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Property data to update
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/routes.UpdatePropertyInput'
      produces:
      - application/json
      responses:
        "200":
          description: 'MESSAGE": "UPDATED SUCCCESS", "STATUS CODE": 200'
        "401":
          description: CAN'T UPDATE PROPERTY
        "500":
          description: ERROR
      summary: Update a property
      tags:
      - Property
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user with the provided information.
      parameters:
      - description: User registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/routes.RegisterUser'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/routes.RegisterUser'
        "400":
          description: Invalid input
        "409":
          description: User already exists
      summary: Register a new user
      tags:
      - Users
  /reject-role-request/{id}:
    put:
      consumes:
      - application/json
      description: Rejects a role change request for an admin user
      operationId: reject-role-change-request
      parameters:
      - description: Request ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success response
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Reject a role change request
      tags:
      - Users
  /submit-role-change:
    post:
      consumes:
      - application/json
      description: Submit user request to change role.
      parameters:
      - description: User Submit
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/routes.RoleChangeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: THE REQUEST HAS BEEN SUBMITED SUCCESSFULLY
        "400":
          description: Invalid input
        "500":
          description: You can only request a role change for yourself
      summary: Submit Change Role Request.
      tags:
      - Users
swagger: "2.0"
