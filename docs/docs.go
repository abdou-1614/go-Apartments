// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/getTop": {
            "get": {
                "description": "Retrieves the top-rated properties in descending order.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Property"
                ],
                "summary": "Get top-rated properties",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/routes.PropertyResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Register a new user with the provided information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.RegisterUser"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "schema": {
                            "$ref": "#/definitions/routes.RegisterUser"
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "409": {
                        "description": "User already exists"
                    }
                }
            }
        }
    },
    "definitions": {
        "model.UserRole": {
            "type": "string",
            "enum": [
                "admin",
                "user",
                "landlords",
                "guest"
            ],
            "x-enum-varnames": [
                "RoleAdmin",
                "RoleUser",
                "RoleLandlords",
                "RoleGuest"
            ]
        },
        "routes.PropertyResponse": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "lat": {
                    "type": "number"
                },
                "lng": {
                    "type": "number"
                },
                "propertyType": {
                    "type": "string"
                },
                "stars": {
                    "type": "integer"
                },
                "state": {
                    "type": "string"
                },
                "street": {
                    "type": "string"
                },
                "unitType": {
                    "type": "string"
                },
                "zip": {
                    "type": "integer"
                }
            }
        },
        "routes.RegisterUser": {
            "type": "object",
            "required": [
                "email",
                "firstName",
                "lastName",
                "password",
                "role"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 265
                },
                "firstName": {
                    "type": "string",
                    "maxLength": 265
                },
                "lastName": {
                    "type": "string",
                    "maxLength": 265
                },
                "password": {
                    "type": "string",
                    "maxLength": 265,
                    "minLength": 6
                },
                "role": {
                    "$ref": "#/definitions/model.UserRole"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Swagger Example APARTEMENTS",
	Description:      "This is a sample server Petstore server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
