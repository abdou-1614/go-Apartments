// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/accept-role-change-request/{id}": {
            "put": {
                "description": "Accepts a role change request for an admin user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Accept a role change request",
                "operationId": "accept-role-change-request",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Request ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/apartments/property/{id}": {
            "get": {
                "description": "Retrieve a list of apartments associated with a specific property.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Apartments"
                ],
                "summary": "Retrieve apartments by Property ID",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "example": 1,
                        "description": "Property ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of apartments"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "patch": {
                "description": "Update an apartment by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Apartments"
                ],
                "summary": "Update an apartment",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "example": 1,
                        "description": "Apartment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "JWT Token",
                        "description": "Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Apartment data to update",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/routes.UpdateUnitsInput"
                            }
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Not Owner"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/getAllProperties": {
            "get": {
                "description": "Retrieves All properties.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Property"
                ],
                "summary": "Get All properties",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/routes.PropertyResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/getTop": {
            "get": {
                "description": "Retrieves the top-rated properties in descending order.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Property"
                ],
                "summary": "Get top-rated properties",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/routes.PropertyResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/location/autocomplete": {
            "get": {
                "description": "Get location suggestions based on user input.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Location"
                ],
                "summary": "Location Autocomplete",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Location input for autocomplete",
                        "name": "location",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit the number of suggestions (default: 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of location suggestions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/location/search": {
            "get": {
                "description": "Search for locations based on user input.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Location"
                ],
                "summary": "Location Search",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Location input for search",
                        "name": "location",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of location search results",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/manage-role-requests": {
            "get": {
                "description": "Retrieves All user requests to change role.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Manage All users requests",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/routes.RoleChangeRequestWithUser"
                            }
                        }
                    },
                    "403": {
                        "description": "Only admins can manage role change requests"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/property": {
            "post": {
                "description": "Create a new property listing.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Property"
                ],
                "summary": "Create a property",
                "parameters": [
                    {
                        "type": "string",
                        "default": "JWT Token",
                        "description": "Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Property data to create",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.PropertyInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Property created successfully"
                    },
                    "400": {
                        "description": "Validation Error\" Example({\"message\": \"Validation Error"
                    },
                    "401": {
                        "description": "Unauthorized\" Example({\"message\": \"Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error\" Example({\"message\": \"Internal Server Error"
                    }
                }
            }
        },
        "/property/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes a property by ID.",
                "tags": [
                    "Property"
                ],
                "summary": "Delete a property",
                "operationId": "delete-property",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Property ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/property/update/{id}": {
            "put": {
                "description": "Update a property by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Property"
                ],
                "summary": "Update a property",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Property ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "JWT Token",
                        "description": "Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Property data to update",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.UpdatePropertyInput"
                        }
                    },
                    {
                        "type": "file",
                        "description": "Property image to upload",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "UPDATED SUCCCESS"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/reject-role-request/{id}": {
            "put": {
                "description": "Rejects a role change request for an admin user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Reject a role change request",
                "operationId": "reject-role-change-request",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Request ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/submit-role-change": {
            "post": {
                "description": "Submit user request to change role.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Submit Change Role Request.",
                "parameters": [
                    {
                        "description": "User Submit",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.RoleChangeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "THE REQUEST HAS BEEN SUBMITED SUCCESSFULLY"
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "500": {
                        "description": "You can only request a role change for yourself"
                    }
                }
            }
        },
        "/user/forget-password": {
            "post": {
                "description": "Sends a password reset email to the user's registered email address.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Send password reset email",
                "parameters": [
                    {
                        "description": "User's registered email address",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.EmailRegisteredInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email sent successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "boolean"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Email\" Example({\"message\": \"Invalid Email"
                    },
                    "401": {
                        "description": "Social Login Account\" Example({\"message\": \"Social Login Account"
                    },
                    "500": {
                        "description": "Internal Server Error\" Example({\"message\": \"Internal Server Error"
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "description": "Logs in a user using their email and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Log in user",
                "parameters": [
                    {
                        "description": "User login credentials",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.LoginUserInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User login successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Validation Error\" Example({\"message\": \"Validation Error"
                    },
                    "401": {
                        "description": "Unauthorized\" Example({\"message\": \"Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error\" Example({\"message\": \"Internal Server Error"
                    }
                }
            }
        },
        "/user/register": {
            "post": {
                "description": "Register a new user with the provided information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.RegisterUser"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "schema": {
                            "$ref": "#/definitions/routes.RegisterUser"
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "409": {
                        "description": "User already exists"
                    }
                }
            }
        },
        "/user/reset-password": {
            "post": {
                "description": "Resets a user's password using a reset token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Reset user password",
                "parameters": [
                    {
                        "description": "New password",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.RestPasswordInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "boolean"
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error\" Example({\"message\": \"Validation Error"
                    },
                    "401": {
                        "description": "Unauthorized\" Example({\"message\": \"Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error\" Example({\"message\": \"Internal Server Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "model.RequestStatus": {
            "type": "string",
            "enum": [
                "pending",
                "accepted",
                "rejected"
            ],
            "x-enum-varnames": [
                "RequestPending",
                "RequestAccepted",
                "RequestRejected"
            ]
        },
        "model.UserRole": {
            "type": "string",
            "enum": [
                "admin",
                "user",
                "landlords",
                "guest"
            ],
            "x-enum-varnames": [
                "RoleAdmin",
                "RoleUser",
                "RoleLandlords",
                "RoleGuest"
            ]
        },
        "routes.ApartmentsInput": {
            "type": "object",
            "required": [
                "bathrooms",
                "bedroom",
                "unit"
            ],
            "properties": {
                "bathrooms": {
                    "type": "number",
                    "maximum": 6.5,
                    "minimum": 0.5
                },
                "bedroom": {
                    "type": "integer",
                    "maximum": 6,
                    "minimum": 0
                },
                "unit": {
                    "type": "string",
                    "maxLength": 256
                }
            }
        },
        "routes.EmailRegisteredInput": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "routes.LoginUserInput": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "routes.PropertyInput": {
            "type": "object",
            "required": [
                "apartments",
                "city",
                "lat",
                "lng",
                "propertyType",
                "state",
                "street",
                "unitType",
                "userID",
                "zip"
            ],
            "properties": {
                "apartments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/routes.ApartmentsInput"
                    }
                },
                "city": {
                    "type": "string",
                    "maxLength": 256
                },
                "lat": {
                    "type": "number"
                },
                "lng": {
                    "type": "number"
                },
                "propertyType": {
                    "type": "string",
                    "maxLength": 256
                },
                "state": {
                    "type": "string",
                    "maxLength": 256
                },
                "street": {
                    "type": "string",
                    "maxLength": 512
                },
                "unitType": {
                    "type": "string",
                    "enum": [
                        "single",
                        "multiple"
                    ]
                },
                "userID": {
                    "type": "integer"
                },
                "zip": {
                    "type": "integer"
                }
            }
        },
        "routes.PropertyResponse": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "lat": {
                    "type": "number"
                },
                "lng": {
                    "type": "number"
                },
                "propertyType": {
                    "type": "string"
                },
                "stars": {
                    "type": "integer"
                },
                "state": {
                    "type": "string"
                },
                "street": {
                    "type": "string"
                },
                "unitType": {
                    "type": "string"
                },
                "zip": {
                    "type": "integer"
                }
            }
        },
        "routes.RegisterUser": {
            "type": "object",
            "required": [
                "email",
                "firstName",
                "lastName",
                "password",
                "role"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 265
                },
                "firstName": {
                    "type": "string",
                    "maxLength": 265
                },
                "lastName": {
                    "type": "string",
                    "maxLength": 265
                },
                "password": {
                    "type": "string",
                    "maxLength": 265,
                    "minLength": 6
                },
                "role": {
                    "$ref": "#/definitions/model.UserRole"
                }
            }
        },
        "routes.RestPasswordInput": {
            "type": "object",
            "required": [
                "password"
            ],
            "properties": {
                "password": {
                    "type": "string"
                }
            }
        },
        "routes.RoleChangeRequest": {
            "type": "object",
            "required": [
                "userID"
            ],
            "properties": {
                "userID": {
                    "type": "integer"
                }
            }
        },
        "routes.RoleChangeRequestWithUser": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "newRole": {
                    "$ref": "#/definitions/model.UserRole"
                },
                "status": {
                    "$ref": "#/definitions/model.RequestStatus"
                },
                "userID": {
                    "type": "integer"
                },
                "userName": {
                    "type": "string"
                }
            }
        },
        "routes.UpdateApartmentsInput": {
            "type": "object",
            "required": [
                "active",
                "availableOn",
                "bathrooms",
                "bedroom",
                "deposit",
                "leaseLength",
                "rent",
                "sqFt",
                "unit"
            ],
            "properties": {
                "ID": {
                    "type": "integer"
                },
                "active": {
                    "type": "boolean"
                },
                "amenities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "availableOn": {
                    "type": "string"
                },
                "bathrooms": {
                    "type": "number",
                    "maximum": 6.5,
                    "minimum": 0.5
                },
                "bedroom": {
                    "type": "integer",
                    "maximum": 6,
                    "minimum": 0
                },
                "deposit": {
                    "type": "number"
                },
                "description": {
                    "type": "string"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "leaseLength": {
                    "type": "string",
                    "maxLength": 256
                },
                "rent": {
                    "type": "number"
                },
                "sqFt": {
                    "type": "integer",
                    "maximum": 100000000000
                },
                "unit": {
                    "type": "string",
                    "maxLength": 256
                }
            }
        },
        "routes.UpdatePropertyInput": {
            "type": "object",
            "required": [
                "apartments",
                "email",
                "laundryType",
                "onMarket",
                "petsAllowed",
                "phoneNumber",
                "unitType"
            ],
            "properties": {
                "amenities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "apartments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/routes.UpdateApartmentsInput"
                    }
                },
                "callingCode": {
                    "type": "string"
                },
                "countryCode": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "includedUtilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "lastName": {
                    "type": "string"
                },
                "laundryType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "onMarket": {
                    "type": "boolean"
                },
                "parkingFee": {
                    "type": "number"
                },
                "petsAllowed": {
                    "type": "string"
                },
                "phoneNumber": {
                    "type": "string"
                },
                "unitType": {
                    "type": "string",
                    "enum": [
                        "single",
                        "multiple"
                    ]
                },
                "website": {
                    "type": "string"
                }
            }
        },
        "routes.UpdateUnitsInput": {
            "type": "object",
            "required": [
                "active",
                "availableOn",
                "bathrooms",
                "bedrooms",
                "sqFt"
            ],
            "properties": {
                "ID": {
                    "type": "integer"
                },
                "active": {
                    "type": "boolean"
                },
                "availableOn": {
                    "type": "string"
                },
                "bathrooms": {
                    "type": "number",
                    "maximum": 6.5,
                    "minimum": 0.5
                },
                "bedrooms": {
                    "type": "integer",
                    "maximum": 6,
                    "minimum": 0
                },
                "sqFt": {
                    "type": "integer",
                    "maximum": 100000000000
                },
                "unit": {
                    "type": "string",
                    "maxLength": 512
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Swagger Example APARTEMENTS",
	Description:      "This is a sample server Petstore server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
